Both glibc and libc are C function libraries under Linux,
 libc is an ANSI C library under Linux;
 glibc is a function library of GUN C under Linux;
 
 1. ANSI C: American National Standards Institute (American National Standards Institute)
 C is the basic C language function library, including the most basic library functions of the C language.
 //Demo.c from glibc
#include<stdio.h>
int main()
{
   printf("hello world\n");
   return 0;
}
# gcc demo.c
 
 2. Glib C: GNU Free Software Organization
   The GNUC library is similar to a third-party plug-in. Since Linux is written in C language, some operations of Linux are implemented in C language.
 Now, so the GUN organization developed a C language library for us to better use the C language to develop programs based on the Linux operating system. Actually we can
 In order to understand it as similar to Qt is a C++ third-party function library. However, the current different Linux distributions do not affect these two function libraries.
 The same processing method, and some may have been integrated in the same library, for example, Ubuntu only has glibc.
 
   C language itself does not provide IO, memory management, string manipulation and other similar mechanisms. As a supplement, C language has a standard library to help C language implementation
 These mechanisms. We basically need to link to these library files when compiling C programs.
 
   The GNU C Library defines the ISO C standard and some other standard (POSIX) function libraries.
 
//glibc demo.c
static gint repeats = 2;
static gint max_size = 8;
static gboolean verbose = FALSE;
static gboolean beep = FALSE;
static gboolean rand = FALSE;
static gchar *string;
static GOptionEntry entries[] =
{
  { "repeats", 'r', 0, G_OPTION_ARG_INT, &repeats, "Average over N repetitions", "N" },
  { "max-size", 'm', 0, G_OPTION_ARG_INT, &max_size, "Test up to 2^M items", "M" },
  { "verbose", 'v', 0, G_OPTION_ARG_NONE, &verbose, "Be verbose", NULL },
  { "beep", 'b', 0, G_OPTION_ARG_NONE, &beep, "Beep when done", NULL },
  { "rand", 0, 0, G_OPTION_ARG_NONE, &rand, "Randomize the data", NULL },
  { "str_test", 's', 0, G_OPTION_ARG_STRING, &string, "test the stirng", NULL},
  { NULL }
};
 
int main (int argc, char *argv[])
{
  GError *error = NULL;
  GOptionContext *context;
  context = g_option_context_new ("- test tree model performance");
  g_option_context_add_main_entries (context, entries, GETTEXT_PACKAGE);
  // g_option_context_add_group (context, gtk_get_option_group (TRUE));
  if (!g_option_context_parse (context, &argc, &argv, &error))
    {
      g_print ("option parsing failed: %s/n", error->message);
      exit (1);
    }
  /* ... */
}
 
 //The structure of GOptionEntry is defined as:
typedef struct {
     const gchar *long_name; // complete command such as: --name
     gchar short_name; // Shorthand command such as: -n
     gint flags; // GOptionFlags enumeration value
     GOptionArg arg; // GOptionArg enumeration value
     gpointer arg_data; // The parsed data, the location to be stored
  
     const gchar *description; // parameter description, --help can be viewed
  const gchar *arg_description; 
} GOptionEntry;
 
 
 //Compile
# gcc test.c -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include \
-L/usr/lib/x86_64-linux-gnu -lglib-2.0 -o test
# ./test -r 10 -b -s test
 Note:
 -b cannot be followed by parameters, because the parameter type is: G_OPTION_ARG_NONE. The variable storing it is a bool value, when there is this
 The value of the parameter, the bool value is TRUE, otherwise it is FALSE.

https://www.programmersought.com/article/24117150023/
